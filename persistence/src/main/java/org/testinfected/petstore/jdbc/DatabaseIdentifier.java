package org.testinfected.petstore.jdbc;

import org.testinfected.petstore.ExceptionImposter;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DatabaseIdentifier {

    public static long autoGeneratedValue(Connection connection) {
        Statement select = null;
        try {
            select = connection.createStatement();
            select.execute("select @@identity");
            ResultSet rs = select.getResultSet();
            rs.next();
            return rs.getLong(1);
        } catch (SQLException e) {
            throw new JDBCException("Could not read last inserted id", e);
        } finally {
            close(select);
        }
    }

    private static void close(Statement statement) {
        if (statement == null) return;
        try {
            statement.close();
        } catch (SQLException ignored) {
        }
    }

    public static DatabaseIdentifier idOf(Object entity) {
        return new DatabaseIdentifier(entity);
    }
    private final Object entity;

    private final Field id;

    public DatabaseIdentifier(Object entity) {
        this.entity = entity;
        this.id = accessField("id");
    }

    private Field accessField(final String name) {
        try {
            Field field = entity.getClass().getDeclaredField(name);
            field.setAccessible(true);
            return field;
        } catch (NoSuchFieldException e) {
            throw new IllegalArgumentException("Entity has no field " + name + ": " + entity, e);
        }
    }

    public void set(long value) {
        try {
            id.set(entity, value);
        } catch (IllegalAccessException e) {
            throw ExceptionImposter.imposterize(e);
        }
    }

    public long get() {
        try {
            return (Long) id.get(entity);
        } catch (IllegalAccessException e) {
            throw ExceptionImposter.imposterize(e);
        }
    }
}
