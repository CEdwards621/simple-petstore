diff --git a/TODO.txt b/TODO.txt
index 88715a8..055a277 100644
--- a/TODO.txt
+++ b/TODO.txt
@@ -2,4 +2,5 @@ o Upgrade to log4j.xml
 o See if we can switch to logback without too much pain
 o Experiment with externalized hibernate config
 o Velocity macros form helpers
+o Switch to windowlicker-web
 
diff --git a/petstore-app/src/main/resources/database.properties b/petstore-app/src/main/resources/database.properties
deleted file mode 100644
index d9115d7..0000000
--- a/petstore-app/src/main/resources/database.properties
+++ /dev/null
@@ -1,6 +0,0 @@
-jdbc.driverClassName: com.mysql.jdbc.Driver
-jdbc.url: ${jdbc.url}
-jdbc.username: ${jdbc.username}
-jdbc.password: ${jdbc.password}
-
-hibernate.dialect: org.hibernate.dialect.MySQL5InnoDBDialect
diff --git a/petstore-app/src/main/webapp/WEB-INF/petstore.xml b/petstore-app/src/main/webapp/WEB-INF/petstore.xml
index 0bd64e5..41e4244 100644
--- a/petstore-app/src/main/webapp/WEB-INF/petstore.xml
+++ b/petstore-app/src/main/webapp/WEB-INF/petstore.xml
@@ -14,8 +14,6 @@
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
 
-    <context:property-placeholder location="classpath:database.properties" system-properties-mode="OVERRIDE"/>
-
     <!--
     Use MVC annotation defaults. Uses method annotation request mapping.
     If customization is required, import mvc.xml instead.
@@ -70,6 +68,4 @@
     <bean id="cart" class="com.pyxis.petstore.domain.order.Cart" scope="session">
         <aop:scoped-proxy/>
     </bean>
-
-    <import resource="classpath:persistence.xml"/>
 </beans>
\ No newline at end of file
diff --git a/petstore-app/src/main/webapp/WEB-INF/views/receipts/show.vm b/petstore-app/src/main/webapp/WEB-INF/views/receipts/show.vm
index aefee09..aed34ad 100644
--- a/petstore-app/src/main/webapp/WEB-INF/views/receipts/show.vm
+++ b/petstore-app/src/main/webapp/WEB-INF/views/receipts/show.vm
@@ -10,6 +10,7 @@
     <legend>Order details</legend>
     <ol>
         <li><label>Order number: </label><span id="order-number">$order.number</span></li>
+        <li><label>Order date: </label><span id="order-date">$date.format($order.processingDate)</span></li>
         <li>
             <table id="order-details">
                 <thead>
diff --git a/petstore-app/src/main/webapp/WEB-INF/web.xml b/petstore-app/src/main/webapp/WEB-INF/web.xml
index de37d24..2e5f217 100644
--- a/petstore-app/src/main/webapp/WEB-INF/web.xml
+++ b/petstore-app/src/main/webapp/WEB-INF/web.xml
@@ -69,7 +69,11 @@
         <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
         <init-param>
 			<param-name>contextConfigLocation</param-name>
-			<param-value>/WEB-INF/petstore.xml</param-value>
+			<param-value>
+                /WEB-INF/petstore.xml
+                classpath:persistence.xml
+                classpath:timeServer.xml
+            </param-value>
 		</init-param>
         <load-on-startup>2</load-on-startup>
     </servlet>
diff --git a/petstore-app/src/test/java/test/com/pyxis/petstore/view/ShowReceiptViewTest.java b/petstore-app/src/test/java/test/com/pyxis/petstore/view/ShowReceiptViewTest.java
index 0f6a141..972ac7a 100644
--- a/petstore-app/src/test/java/test/com/pyxis/petstore/view/ShowReceiptViewTest.java
+++ b/petstore-app/src/test/java/test/com/pyxis/petstore/view/ShowReceiptViewTest.java
@@ -8,12 +8,15 @@ import org.w3c.dom.Element;
 import test.support.com.pyxis.petstore.views.ModelBuilder;
 import test.support.com.pyxis.petstore.views.VelocityRendering;
 
+import java.util.Date;
+
 import static com.pyxis.matchers.dom.DomMatchers.*;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static test.support.com.pyxis.petstore.builders.AddressBuilder.anAddress;
 import static test.support.com.pyxis.petstore.builders.CartBuilder.aCart;
 import static test.support.com.pyxis.petstore.builders.CreditCardBuilder.aVisa;
+import static test.support.com.pyxis.petstore.builders.DateBuilder.aDate;
 import static test.support.com.pyxis.petstore.builders.ItemBuilder.anItem;
 import static test.support.com.pyxis.petstore.builders.OrderBuilder.anOrder;
 import static test.support.com.pyxis.petstore.views.ModelBuilder.aModel;
@@ -26,6 +29,8 @@ public class ShowReceiptViewTest {
     Element showReceiptView;
     ModelBuilder model;
     String orderTotal = "458.97";
+    Date orderDate = aDate().onCalendar(2010, 10, 15).build();
+
 
     @Before public void
     renderView() {
@@ -41,6 +46,7 @@ public class ShowReceiptViewTest {
                                 anItemOrderedSeveralTimes,
                                 anItemOrderedSeveralTimes,
                                 anItemOrderedOnce)).
+                        processedAt(orderDate).
                         paidWith(aVisa().
                             withNumber("9999 9999 9999").
                             withExpiryDate("12/12").
@@ -58,6 +64,7 @@ public class ShowReceiptViewTest {
     @Test public void
     displaysOrderSummary() {
         assertThat("view", showReceiptView, hasOrderNumber("00000100"));
+        assertThat("view", showReceiptView, hasOrderProcessingDate("2010-10-15"));
         assertThat("view", showReceiptView, hasOrderTotal(orderTotal));
     }
 
@@ -111,10 +118,14 @@ public class ShowReceiptViewTest {
     }
 
     private Matcher<Element> hasOrderTotal(final String orderTotal) {
-        return hasUniqueSelector("#order ol li #order-total", withText(orderTotal));
+        return hasUniqueSelector("#order-total", withText(orderTotal));
     }
 
     private Matcher<Element> hasOrderNumber(final String orderNumber) {
-        return hasUniqueSelector("#order ol li #order-number", withText(orderNumber));
+        return hasUniqueSelector("#order-number", withText(orderNumber));
+    }
+
+    private Matcher<? super Element> hasOrderProcessingDate(String orderDate) {
+        return hasUniqueSelector("#order-date", withText(orderDate));
     }
 }
\ No newline at end of file
diff --git a/petstore-app/src/test/java/test/support/com/pyxis/petstore/views/VelocityRendering.java b/petstore-app/src/test/java/test/support/com/pyxis/petstore/views/VelocityRendering.java
index 0a4701c..e09c92f 100644
--- a/petstore-app/src/test/java/test/support/com/pyxis/petstore/views/VelocityRendering.java
+++ b/petstore-app/src/test/java/test/support/com/pyxis/petstore/views/VelocityRendering.java
@@ -3,7 +3,6 @@ package test.support.com.pyxis.petstore.views;
 import com.pyxis.matchers.ExceptionImposter;
 import org.apache.velocity.app.VelocityEngine;
 import org.apache.velocity.tools.generic.DateTool;
-import org.apache.velocity.tools.generic.DisplayTool;
 import org.springframework.core.io.DefaultResourceLoader;
 import org.springframework.core.io.Resource;
 import org.springframework.core.io.ResourceLoader;
@@ -127,7 +126,7 @@ public class VelocityRendering {
 
     private void setupTools() {
         model.put("base", PathFor.BASE_URL);
-        model.put("display", new DisplayTool());
+        model.put("display", new org.apache.velocity.tools.generic.DisplayTool());
         model.put("date", dateTool());
     }
 
diff --git a/petstore-domain/pom.xml b/petstore-domain/pom.xml
index 5d21e31..d135d3a 100644
--- a/petstore-domain/pom.xml
+++ b/petstore-domain/pom.xml
@@ -11,6 +11,11 @@
 
 	<dependencies>
         <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context</artifactId>
+            <version>3.0.2.RELEASE</version>
+        </dependency>
+        <dependency>
             <groupId>commons-lang</groupId>
             <artifactId>commons-lang</artifactId>
         </dependency>
diff --git a/petstore-domain/src/main/java/com/pyxis/petstore/domain/order/Cashier.java b/petstore-domain/src/main/java/com/pyxis/petstore/domain/order/Cashier.java
index 133bdbd..c44667e 100644
--- a/petstore-domain/src/main/java/com/pyxis/petstore/domain/order/Cashier.java
+++ b/petstore-domain/src/main/java/com/pyxis/petstore/domain/order/Cashier.java
@@ -1,6 +1,7 @@
 package com.pyxis.petstore.domain.order;
 
 import com.pyxis.petstore.domain.billing.PaymentMethod;
+import com.pyxis.petstore.domain.time.Clock;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -8,11 +9,13 @@ import org.springframework.stereotype.Service;
 public class Cashier implements CheckoutAssistant, PaymentCollector {
     private final OrderNumberSequence orderNumberSequence;
     private final OrderLog orderLog;
+    private final Clock clock;
 
     @Autowired
-    public Cashier(OrderNumberSequence orderNumberSequence, OrderLog orderLog) {
+    public Cashier(OrderNumberSequence orderNumberSequence, OrderLog orderLog, Clock clock) {
         this.orderNumberSequence = orderNumberSequence;
         this.orderLog = orderLog;
+        this.clock = clock;
     }
 
     public Order checkout(Cart cart) {
@@ -23,7 +26,7 @@ public class Cashier implements CheckoutAssistant, PaymentCollector {
     }
 
     public void collectPayment(Order order, PaymentMethod paymentMethod) {
-        order.pay(paymentMethod);
+        order.process(clock, paymentMethod);
         orderLog.record(order);
     }
 }
diff --git a/petstore-domain/src/main/java/com/pyxis/petstore/domain/order/Order.java b/petstore-domain/src/main/java/com/pyxis/petstore/domain/order/Order.java
index 11616b2..784bf11 100644
--- a/petstore-domain/src/main/java/com/pyxis/petstore/domain/order/Order.java
+++ b/petstore-domain/src/main/java/com/pyxis/petstore/domain/order/Order.java
@@ -1,6 +1,7 @@
 package com.pyxis.petstore.domain.order;
 
 import com.pyxis.petstore.domain.billing.PaymentMethod;
+import com.pyxis.petstore.domain.time.Clock;
 import org.hibernate.annotations.Cascade;
 import org.hibernate.annotations.IndexColumn;
 
@@ -8,6 +9,7 @@ import javax.persistence.*;
 import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 
 @Entity  @Access(AccessType.FIELD) @Table(name = "orders")
@@ -26,6 +28,9 @@ public class Order {
     @JoinColumn(name = "payment_id")
     private PaymentMethod paymentMethod;
 
+    @Temporal(TemporalType.DATE)
+    private Date processingDate;
+
     Order() {}
 
     public Order(OrderNumber number) {
@@ -70,11 +75,20 @@ public class Order {
         return paymentMethod;
     }
 
-    public boolean isPaid() {
-        return paymentMethod != null;
+    public boolean isProcessed() {
+        return processingDate != null;
     }
 
     public int getLineItemCount() {
         return lines.size();
     }
+
+    public void process(Clock clock, PaymentMethod paymentMethod) {
+        pay(paymentMethod);
+        processingDate = clock.now();
+    }
+
+    public Date getProcessingDate() {
+        return processingDate;
+    }
 }
diff --git a/petstore-domain/src/main/java/com/pyxis/petstore/domain/time/Clock.java b/petstore-domain/src/main/java/com/pyxis/petstore/domain/time/Clock.java
new file mode 100644
index 0000000..3f1b473
--- /dev/null
+++ b/petstore-domain/src/main/java/com/pyxis/petstore/domain/time/Clock.java
@@ -0,0 +1,7 @@
+package com.pyxis.petstore.domain.time;
+
+import java.util.Date;
+
+public interface Clock {
+    Date now();
+}
diff --git a/petstore-domain/src/main/java/com/pyxis/petstore/domain/time/SystemClock.java b/petstore-domain/src/main/java/com/pyxis/petstore/domain/time/SystemClock.java
new file mode 100644
index 0000000..2789553
--- /dev/null
+++ b/petstore-domain/src/main/java/com/pyxis/petstore/domain/time/SystemClock.java
@@ -0,0 +1,10 @@
+package com.pyxis.petstore.domain.time;
+
+import java.util.Date;
+
+public class SystemClock {
+
+    public Date now() {
+        return new Date();
+    }
+}
diff --git a/petstore-domain/src/test/java/test/com/pyxis/petstore/domain/order/OrderTest.java b/petstore-domain/src/test/java/test/com/pyxis/petstore/domain/order/OrderTest.java
index b25501d..0d67d17 100644
--- a/petstore-domain/src/test/java/test/com/pyxis/petstore/domain/order/OrderTest.java
+++ b/petstore-domain/src/test/java/test/com/pyxis/petstore/domain/order/OrderTest.java
@@ -5,13 +5,20 @@ import com.pyxis.petstore.domain.order.CartItem;
 import com.pyxis.petstore.domain.order.LineItem;
 import com.pyxis.petstore.domain.order.Order;
 import com.pyxis.petstore.domain.product.Item;
+import com.pyxis.petstore.domain.time.Clock;
 import org.hamcrest.FeatureMatcher;
 import org.hamcrest.Matcher;
 import org.hamcrest.Matchers;
+import org.jmock.Expectations;
+import org.jmock.Mockery;
+import org.jmock.integration.junit4.JMock;
+import org.jmock.integration.junit4.JUnit4Mockery;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import java.math.BigDecimal;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -25,8 +32,12 @@ import static test.support.com.pyxis.petstore.builders.CreditCardBuilder.aVisa;
 import static test.support.com.pyxis.petstore.builders.ItemBuilder.anItem;
 import static test.support.com.pyxis.petstore.builders.OrderBuilder.anOrder;
 
+@RunWith(JMock.class)
 public class OrderTest {
 
+    Mockery context = new JUnit4Mockery();
+    Clock clock = context.mock(Clock.class);
+
     Order order = anOrder().build();
 
     @Test public void
@@ -74,11 +85,38 @@ public class OrderTest {
     }
     
     @Test public void
-    indicatesPaidWhenPaymentWasReceived() {
+    indicatesWhenOrderWasProcessed() {
+        final Date aDate = new Date();
         Order order = anOrder().build();
-        assertFalse("paid", order.isPaid());
-        order.pay(aVisa().build());
-        assertTrue("not paid", order.isPaid());
+        assertFalse("processed", order.isProcessed());
+
+        context.checking(new Expectations() {{
+            allowing(clock).now(); will(returnValue(aDate));
+        }});
+
+        order.process(clock, aVisa().build());
+        assertTrue("not processed", order.isProcessed());
+    }
+
+    @Test public void
+    recordsProcessingDate() {
+        final Date today = today();
+        context.checking(new Expectations() {{
+            oneOf(clock).now(); will(returnValue(today));
+        }});
+
+        order.process(clock, aVisa().build());
+
+        assertThat("order date", order.getProcessingDate(), equalTo(today));
+    }
+
+    private Date today() {
+        return new Date() {
+            @Override
+            public String toString() {
+                return "today";
+            }
+        };
     }
 
     private Cart aCartWithSomeItemsAddedMultipleTimes() {
diff --git a/petstore-domain/src/test/java/test/support/com/pyxis/petstore/builders/DateBuilder.java b/petstore-domain/src/test/java/test/support/com/pyxis/petstore/builders/DateBuilder.java
new file mode 100644
index 0000000..8f389ea
--- /dev/null
+++ b/petstore-domain/src/test/java/test/support/com/pyxis/petstore/builders/DateBuilder.java
@@ -0,0 +1,82 @@
+package test.support.com.pyxis.petstore.builders;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.TimeZone;
+
+public class DateBuilder {
+
+    private static TimeZone gmt = TimeZone.getTimeZone("Universal");
+
+    private TimeZone timeZone = gmt;
+    private int year;
+    private int month;
+    private int day;
+    private int hour;
+    private int minute;
+    private int second;
+    private int millisecond;
+
+    public static DateBuilder aDate() {
+        DateBuilder builder = new DateBuilder();
+        return builder.inMillis(System.currentTimeMillis());
+    }
+
+    public DateBuilder at(int year, int month, int day, int hour, int minute, int second) {
+        return onCalendar(year, month, day).atTime(hour, minute, second);
+    }
+
+    public DateBuilder in(TimeZone zone) {
+        timeZone = zone;
+        return this;
+    }
+
+    public DateBuilder onCalendar(int year, int month, int day) {
+        this.year = year;
+        this.month = month;
+        this.day = day;
+        return this;
+    }
+
+    public DateBuilder atTime(int hour, int minute, int second) {
+        return atTime(hour, minute, second, 0);
+    }
+
+    public DateBuilder atTime(int hour, int minute, int second, int millisecond) {
+        this.hour = hour;
+        this.minute = minute;
+        this.second = second;
+        this.millisecond = millisecond;
+        return this;
+    }
+
+    public DateBuilder atMidnight() {
+        return atTime(0, 0, 0);
+    }
+
+    public DateBuilder inMillis(long millis) {
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTimeInMillis(millis);
+        timeZone = calendar.getTimeZone();
+        year = calendar.get(Calendar.YEAR);
+        month = calendar.get(Calendar.MONTH) + 1;
+        day = calendar.get(Calendar.DATE);
+        hour = calendar.get(Calendar.HOUR_OF_DAY);
+        minute = calendar.get(Calendar.MINUTE);
+        second = calendar.get(Calendar.SECOND);
+        millisecond = calendar.get(Calendar.MILLISECOND);
+        return this;
+    }
+
+    public Date build() {
+        Calendar calendar = Calendar.getInstance(timeZone);
+        calendar.set(Calendar.YEAR, year);
+        calendar.set(Calendar.MONTH, month - 1);
+        calendar.set(Calendar.DATE, day);
+        calendar.set(Calendar.HOUR_OF_DAY, hour);
+        calendar.set(Calendar.MINUTE, minute);
+        calendar.set(Calendar.SECOND, second);
+        calendar.set(Calendar.MILLISECOND, millisecond);
+        return calendar.getTime();
+    }
+}
diff --git a/petstore-domain/src/test/java/test/support/com/pyxis/petstore/builders/OrderBuilder.java b/petstore-domain/src/test/java/test/support/com/pyxis/petstore/builders/OrderBuilder.java
index 23fa3b8..d27351b 100644
--- a/petstore-domain/src/test/java/test/support/com/pyxis/petstore/builders/OrderBuilder.java
+++ b/petstore-domain/src/test/java/test/support/com/pyxis/petstore/builders/OrderBuilder.java
@@ -5,6 +5,9 @@ import com.pyxis.petstore.domain.billing.PaymentMethod;
 import com.pyxis.petstore.domain.order.Cart;
 import com.pyxis.petstore.domain.order.Order;
 import com.pyxis.petstore.domain.order.OrderNumber;
+import com.pyxis.petstore.domain.time.Clock;
+
+import java.util.Date;
 
 import static test.support.com.pyxis.petstore.builders.CartBuilder.aCart;
 import static test.support.com.pyxis.petstore.builders.OrderNumberFaker.aNumber;
@@ -15,6 +18,7 @@ public class OrderBuilder implements Builder<Order> {
     private Cart cart = aCart().build();
     private Address billingAddress;
     private PaymentMethod paymentMethod;
+    private Date processingDate;
 
     public static OrderBuilder anOrder() {
         return new OrderBuilder();
@@ -31,11 +35,19 @@ public class OrderBuilder implements Builder<Order> {
 
     public Order build() {
         Order order = new Order(orderNumber);
+        if (processingDate != null) order.process(on(processingDate), paymentMethod);
         order.addItemsFrom(cart);
-        order.pay(paymentMethod);
         return order;
     }
 
+    private Clock on(final Date date) {
+        return new Clock() {
+            public Date now() {
+                return date;
+            }
+        };
+    }
+
     public OrderBuilder withNumber(String orderNumber) {
         return with(new OrderNumber(orderNumber));
     }
@@ -54,4 +66,14 @@ public class OrderBuilder implements Builder<Order> {
         this.billingAddress = addressBuilder.build();
         return this;
     }
+
+    public OrderBuilder processedAt(DateBuilder dateBuilder) {
+        return processedAt(dateBuilder.build());
+    }
+
+    public OrderBuilder processedAt(Date processingDate) {
+        this.processingDate = processingDate;
+        return this;
+    }
+
 }
\ No newline at end of file
diff --git a/petstore-infrastructure/pom.xml b/petstore-infrastructure/pom.xml
index 70b1908..02c4096 100644
--- a/petstore-infrastructure/pom.xml
+++ b/petstore-infrastructure/pom.xml
@@ -89,6 +89,16 @@
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>2.5</version>
+                <configuration>
+                    <systemPropertyVariables>
+                        <jdbc.url>jdbc:mysql://localhost:3306/petstore_test</jdbc.url>
+                    </systemPropertyVariables>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-jar-plugin</artifactId>
                 <executions>
                     <execution>
@@ -103,6 +113,16 @@
         <resources>
             <resource>
                 <directory>src/main/resources</directory>
+                <includes>
+                    <include>database.properties</include>
+                </includes>
+                <filtering>true</filtering>
+            </resource>
+            <resource>
+                <directory>src/main/resources</directory>
+                <excludes>
+                    <exclude>database.properties</exclude>
+                </excludes>
             </resource>
         </resources>
         <testResources>
@@ -157,7 +177,7 @@
             <id>test</id>
             <activation>
                 <property>
-                    <name>env.type</name>                           
+                    <name>env.type</name>
                     <value>test</value>
                 </property>
             </activation>
@@ -167,8 +187,9 @@
                         <groupId>com.carbonfive.db-support</groupId>
                         <artifactId>db-migration-maven-plugin</artifactId>
                         <version>0.9.9-m2</version>
+                        <!-- use custom naming strategy to fit hibernate defaults -->
                         <configuration>
-                            <url>jdbc:mysql://localhost:3306/petstore_test</url>
+                            <url>${jdbc.url}</url>
                             <username>${jdbc.username}</username>
                             <password>${jdbc.password}</password>
                         </configuration>
@@ -184,11 +205,11 @@
             </build>
         </profile>
         <profile>
-            <id>production</id>
+            <id>system</id>
             <activation>
                 <property>
                     <name>env.type</name>
-                    <value>production</value>
+                    <value>system</value>
                 </property>
             </activation>
             <build>
diff --git a/petstore-infrastructure/src/main/db/migrations/20101015202217_add_processing_date_to_orders.sql b/petstore-infrastructure/src/main/db/migrations/20101015202217_add_processing_date_to_orders.sql
new file mode 100644
index 0000000..bd7a647
--- /dev/null
+++ b/petstore-infrastructure/src/main/db/migrations/20101015202217_add_processing_date_to_orders.sql
@@ -0,0 +1 @@
+alter table orders add processing_date date;
\ No newline at end of file
diff --git a/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/InternetTimeClock.java b/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/InternetTimeClock.java
new file mode 100644
index 0000000..6f1e60f
--- /dev/null
+++ b/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/InternetTimeClock.java
@@ -0,0 +1,58 @@
+package com.pyxis.petstore.nist;
+
+import com.pyxis.petstore.domain.time.Clock;
+import org.springframework.stereotype.Service;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.Socket;
+import java.util.Date;
+
+@Service
+public class InternetTimeClock implements Clock {
+    private final String host;
+    private final int port;
+    private TimeServerDialect timeServerDialect = new NISTDialect();
+
+    public InternetTimeClock(String host, int port) {
+        this.host = host;
+        this.port = port;
+    }
+
+    public void speak(TimeServerDialect timeServerDialect) {
+        this.timeServerDialect = timeServerDialect;
+    }
+
+    public Date now() {
+        try {
+            String now = obtainTimeCodeFromServer();
+            return timeServerDialect.translate(now) ;
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private String obtainTimeCodeFromServer() throws IOException {
+        Socket socket = null;
+        try {
+            socket = new Socket(host, port);
+            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
+            skip(nextLine(reader));
+            return nextLine(reader);
+        } finally {
+            close(socket);
+        }
+    }
+
+    private String nextLine(BufferedReader reader) throws IOException {
+        return reader.readLine();
+    }
+
+    private void skip(String line) throws IOException {
+    }
+
+    private void close(Socket socket) throws IOException {
+        if (socket != null) socket.close();
+    }
+}
diff --git a/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/NISTDialect.java b/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/NISTDialect.java
new file mode 100644
index 0000000..554610a
--- /dev/null
+++ b/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/NISTDialect.java
@@ -0,0 +1,25 @@
+package com.pyxis.petstore.nist;
+
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.TimeZone;
+
+public class NISTDialect implements TimeServerDialect {
+    private static final DateFormat NIST_DATE_TIME_FORMAT = inUTC("yy-MM-dd HH:mm:ss");
+
+    private static DateFormat inUTC(String pattern) {
+        DateFormat format = new SimpleDateFormat(pattern);
+        format.setTimeZone(TimeZone.getTimeZone("UTC"));
+        return format;
+    }
+
+    public Date translate(String serverOutput) throws ParseException {
+        return NIST_DATE_TIME_FORMAT.parse(dateTimePart(serverOutput));
+    }
+
+    private String dateTimePart(String serverOutput) {
+        return serverOutput.substring(6, 23);
+    }
+}
diff --git a/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/TimeServerDialect.java b/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/TimeServerDialect.java
new file mode 100644
index 0000000..37756f5
--- /dev/null
+++ b/petstore-infrastructure/src/main/java/com/pyxis/petstore/nist/TimeServerDialect.java
@@ -0,0 +1,9 @@
+package com.pyxis.petstore.nist;
+
+import java.text.ParseException;
+import java.util.Date;
+
+public interface TimeServerDialect {
+
+    Date translate(String timeServerResponse) throws ParseException;
+}
diff --git a/petstore-infrastructure/src/main/resources/database.properties b/petstore-infrastructure/src/main/resources/database.properties
new file mode 100644
index 0000000..d0f19e0
--- /dev/null
+++ b/petstore-infrastructure/src/main/resources/database.properties
@@ -0,0 +1,9 @@
+jdbc.driverClassName: com.mysql.jdbc.Driver
+jdbc.url: ${jdbc.url}
+jdbc.username: ${jdbc.username}
+jdbc.password: ${jdbc.password}
+
+hibernate.dialect: org.hibernate.dialect.MySQL5InnoDBDialect
+
+timeServer.host: ${timeServer.host}
+timeServer.port: ${timeServer.port}
diff --git a/petstore-infrastructure/src/main/resources/persistence.xml b/petstore-infrastructure/src/main/resources/persistence.xml
index 052e399..a60320a 100644
--- a/petstore-infrastructure/src/main/resources/persistence.xml
+++ b/petstore-infrastructure/src/main/resources/persistence.xml
@@ -10,6 +10,8 @@
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
+    <context:property-placeholder location="classpath:database.properties" system-properties-mode="OVERRIDE"/>
+
     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
         <property name="driverClassName" value="${jdbc.driverClassName}"/>
         <property name="url" value="${jdbc.url}"/>
diff --git a/petstore-infrastructure/src/main/resources/timeServer.xml b/petstore-infrastructure/src/main/resources/timeServer.xml
new file mode 100644
index 0000000..7884d42
--- /dev/null
+++ b/petstore-infrastructure/src/main/resources/timeServer.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:context="http://www.springframework.org/schema/context"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
+           http://www.springframework.org/schema/context
+           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
+
+    <bean id="clock" class="com.pyxis.petstore.nist.InternetTimeClock">
+        <constructor-arg index="0" value="${timeServer.host}"/>
+        <constructor-arg index="1" value="${timeServer.port}"/>
+    </bean>
+</beans>
\ No newline at end of file
diff --git a/petstore-infrastructure/src/test/java/test/com/pyxis/petstore/nist/NISTDialectTest.java b/petstore-infrastructure/src/test/java/test/com/pyxis/petstore/nist/NISTDialectTest.java
new file mode 100644
index 0000000..591a5df
--- /dev/null
+++ b/petstore-infrastructure/src/test/java/test/com/pyxis/petstore/nist/NISTDialectTest.java
@@ -0,0 +1,25 @@
+package test.com.pyxis.petstore.nist;
+
+import com.pyxis.petstore.nist.NISTDialect;
+import org.junit.Test;
+
+import java.text.ParseException;
+import java.util.Date;
+import java.util.TimeZone;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.equalTo;
+import static test.support.com.pyxis.petstore.builders.DateBuilder.aDate;
+
+public class NISTDialectTest {
+
+    NISTDialect dialect = new NISTDialect();
+    TimeZone utc = TimeZone.getTimeZone("UTC");
+    String serverOutput = "55488 10-10-19 16:03:15 20 0 0 448.0 UTC(NIST) *";
+
+    @Test public void
+    translatesOutputToPointInUTCTime() throws ParseException {
+        Date serverTime = aDate().onCalendar(2010, 10, 19).atTime(16, 3, 15).in(utc).build();
+        assertThat("server time", dialect.translate(serverOutput), equalTo(serverTime));
+    }
+}
diff --git a/petstore-infrastructure/src/test/java/test/integration/com/pyxis/petstore/nist/InternetTimeClockTest.java b/petstore-infrastructure/src/test/java/test/integration/com/pyxis/petstore/nist/InternetTimeClockTest.java
new file mode 100644
index 0000000..f365ab2
--- /dev/null
+++ b/petstore-infrastructure/src/test/java/test/integration/com/pyxis/petstore/nist/InternetTimeClockTest.java
@@ -0,0 +1,51 @@
+package test.integration.com.pyxis.petstore.nist;
+
+import com.pyxis.petstore.nist.InternetTimeClock;
+import com.pyxis.petstore.nist.TimeServerDialect;
+import org.jmock.Expectations;
+import org.jmock.Mockery;
+import org.jmock.integration.junit4.JMock;
+import org.jmock.integration.junit4.JUnit4Mockery;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import test.support.com.pyxis.petstore.nist.FrozenTimeServer;
+
+import java.io.IOException;
+import java.util.Date;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.equalTo;
+import static test.support.com.pyxis.petstore.builders.DateBuilder.aDate;
+
+@RunWith(JMock.class)
+public class InternetTimeClockTest {
+
+    Mockery context = new JUnit4Mockery();
+    TimeServerDialect timeServerDialect = context.mock(TimeServerDialect.class);
+    FrozenTimeServer server = FrozenTimeServer.atPointInTime(aDate().build());
+    int serverPort = 10013;
+    InternetTimeClock clock = new InternetTimeClock("localhost", serverPort);
+
+    @Before
+    public void startTimeServer() throws IOException {
+        server.start(serverPort);
+    }
+
+    @After
+    public void stopTimeServer() throws IOException {
+        server.stop();
+    }
+
+    @Test public void
+    obtainsCurrentTimeFromRemoteServer() throws Exception {
+        final Date pointInTime = new Date();
+        context.checking(new Expectations() {{
+            oneOf(timeServerDialect).translate(server.output()); will(returnValue(pointInTime));
+        }});
+        clock.speak(timeServerDialect);
+        assertThat("internet time", clock.now(), equalTo(pointInTime));
+    }
+
+}
diff --git a/petstore-infrastructure/src/test/java/test/integration/com/pyxis/petstore/persistence/PersistentOrderLogTest.java b/petstore-infrastructure/src/test/java/test/integration/com/pyxis/petstore/persistence/PersistentOrderLogTest.java
index fdd552c..4089a56 100644
--- a/petstore-infrastructure/src/test/java/test/integration/com/pyxis/petstore/persistence/PersistentOrderLogTest.java
+++ b/petstore-infrastructure/src/test/java/test/integration/com/pyxis/petstore/persistence/PersistentOrderLogTest.java
@@ -26,6 +26,7 @@ import static org.junit.Assert.fail;
 import static test.support.com.pyxis.petstore.builders.AddressBuilder.anAddress;
 import static test.support.com.pyxis.petstore.builders.CartBuilder.aCart;
 import static test.support.com.pyxis.petstore.builders.CreditCardBuilder.aVisa;
+import static test.support.com.pyxis.petstore.builders.DateBuilder.aDate;
 import static test.support.com.pyxis.petstore.builders.ItemBuilder.anItem;
 import static test.support.com.pyxis.petstore.builders.OrderBuilder.anOrder;
 import static test.support.com.pyxis.petstore.db.Database.idOf;
@@ -72,7 +73,8 @@ public class PersistentOrderLogTest {
     @Test public void
     canRoundTripOrders() throws Exception {
         OrderBuilder aPendingOrder = anOrder();
-        OrderBuilder aPaidOrder = anOrder().
+        OrderBuilder aProcessedOrder = anOrder().
+                processedAt(aDate().atMidnight()).
                 paidWith(aVisa().
                         withNumber("9999 9999 9999").
                         withExpiryDate("12 dec 2012").
@@ -82,14 +84,15 @@ public class PersistentOrderLogTest {
                             withEmail("jleclair@gmail.com")
                         )
                 );
-        assertCanPersistAndReload("pending order", aPendingOrder.build());
-        assertCanPersistAndReload("paid order", aPaidOrder.build());
+
+        assertCanRoundTrip("pending order", aPendingOrder.build());
+        assertCanRoundTrip("processed order", aProcessedOrder.build());
     }
 
-    private void assertCanPersistAndReload(String orderName, Order order) throws Exception {
+    private void assertCanRoundTrip(String entity, Order order) throws Exception {
         database.persist(order);
-        database.assertCanBeReloadedWithSameState(orderName, order);
-        if (order.isPaid()) database.assertCanBeReloadedWithSameState(order.getPaymentMethod());
+        database.assertCanBeReloadedWithSameState(entity, order);
+        if (order.isProcessed()) database.assertCanBeReloadedWithSameState(order.getPaymentMethod());
     }
 
     @Test public void
diff --git a/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/db/Database.java b/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/db/Database.java
index 27b4e35..7e56b5f 100644
--- a/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/db/Database.java
+++ b/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/db/Database.java
@@ -55,7 +55,7 @@ public class Database {
         }
         makeSureSubsequentLoadOperationsHitTheDatabase();
     }
-                                                                                                                                                   
+
     private void makeSureSubsequentLoadOperationsHitTheDatabase() {
         session.clear();
     }
@@ -75,11 +75,11 @@ public class Database {
         assertCanBeReloadedWithSameState("entity", original);
     }
 
-    public void assertCanBeReloadedWithSameState(String entityName, final Object original) throws Exception {
+    public void assertCanBeReloadedWithSameState(final String entity, final Object original) throws Exception {
         perform(new UnitOfWork() {
             public void work(Session session) throws Exception {
                 Object loaded = session.get(original.getClass(), idOf(original));
-                assertThat("entity", loaded, samePersistentFieldsAs(original));
+                assertThat(entity, loaded, samePersistentFieldsAs(original));
             }
         });
     }
diff --git a/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/db/PersistenceContext.java b/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/db/PersistenceContext.java
index 40d8cdc..6478e9e 100644
--- a/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/db/PersistenceContext.java
+++ b/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/db/PersistenceContext.java
@@ -13,7 +13,11 @@ import static com.pyxis.matchers.ExceptionImposter.imposterize;
 
 public class PersistenceContext {
 
-    private static final String[] CONFIG_LOCATIONS = new String[] {"database.xml"};
+    private static final String JDBC_URL = "jdbc.url";
+    private static final String DEFAULT_MYSQL_TEST_DATABASE = "jdbc:mysql://localhost:3306/petstore_test";
+    private static final String[] CONFIG_LOCATIONS = new String[] {
+            "persistence.xml"
+    };
     private static final String MIGRATION_PROPERTIES_FILE = "/migration.properties";
 
     private static PersistenceContext instance;
@@ -31,10 +35,23 @@ public class PersistenceContext {
     }
 
     public PersistenceContext() {
+        beFriendlyWithDevelopmentEnvironments();
         loadSpringContext();
         migrateDatabase();
     }
 
+    private void beFriendlyWithDevelopmentEnvironments() {
+        overrideDatabaseUrl();
+    }
+
+    private void overrideDatabaseUrl() {
+        System.setProperty(JDBC_URL, testDatabaseUrl());
+    }
+
+    private static String testDatabaseUrl() {
+        return System.getProperty(JDBC_URL, DEFAULT_MYSQL_TEST_DATABASE);
+    }
+
     private void loadSpringContext() {
         applicationContext = new ClassPathXmlApplicationContext(CONFIG_LOCATIONS);
     }
diff --git a/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/nist/FrozenTimeServer.java b/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/nist/FrozenTimeServer.java
new file mode 100644
index 0000000..39bc894
--- /dev/null
+++ b/petstore-infrastructure/src/test/java/test/support/com/pyxis/petstore/nist/FrozenTimeServer.java
@@ -0,0 +1,90 @@
+package test.support.com.pyxis.petstore.nist;
+
+import java.io.BufferedWriter;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
+import java.net.ServerSocket;
+import java.net.Socket;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.TimeZone;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+import static java.lang.String.format;
+
+public class FrozenTimeServer {
+
+    /**
+     * Time code format is
+     * JJJJJ YR-MO-DA HH:MM:SS TT L H msADV UTC(NIST) OTM
+     * see http://www.nist.gov/pml/div688/grp40/its.cfm
+     **/
+    private static final TimeZone utc = TimeZone.getTimeZone("UTC");
+    private static final String DATE_FORMAT = "yy-MM-dd";
+    private static final String TIME_FORMAT = "HH:mm:SS";
+    private static final String TIME_CODE_FORMAT = "JJJJJ %s %s TT L H msADV UTC(NIST) *";
+
+    private final String output;
+    private final ExecutorService executor = Executors.newSingleThreadExecutor();
+    private ServerSocket server;
+
+    public FrozenTimeServer(String output) {
+        this.output = output;
+    }
+
+    public void start(int port) throws IOException {
+        server = new ServerSocket(port);
+        executor.submit(new Callable<Object>() {
+            public Object call() throws Exception {
+                while (!server.isClosed()) {
+                    Socket socket = server.accept();
+                    Writer writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
+                    writer.write("\n");
+                    writer.write(output);
+                    writer.flush();
+                    socket.close();
+                }
+                return null;
+            }
+        });
+    }
+
+    public void stop() throws IOException {
+        server.close();
+        executor.shutdown();
+    }
+
+    public String output() {
+        return output;
+    }
+
+    public static FrozenTimeServer at(String serverOutput) {
+        return new FrozenTimeServer(serverOutput);
+    }
+
+    public static FrozenTimeServer atPointInTime(Date pointInTime) {
+        return at(response(pointInTime));
+    }
+
+    private static String response(Date pointInTime) {
+        return format(TIME_CODE_FORMAT, date(pointInTime), time(pointInTime));
+    }
+
+    private static String time(Date pointInTime) {
+        return formatter(TIME_FORMAT).format(pointInTime);
+    }
+
+    private static String date(Date pointInTime) {
+        return formatter(DATE_FORMAT).format(pointInTime);
+    }
+
+    private static DateFormat formatter(String pattern) {
+        DateFormat format = new SimpleDateFormat(pattern);
+        format.setTimeZone(utc);
+        return format;
+    }
+}
diff --git a/petstore-infrastructure/src/test/resources/database.properties b/petstore-infrastructure/src/test/resources/database.properties
deleted file mode 100644
index 6220577..0000000
--- a/petstore-infrastructure/src/test/resources/database.properties
+++ /dev/null
@@ -1,6 +0,0 @@
-jdbc.driverClassName: com.mysql.jdbc.Driver
-jdbc.url: jdbc:mysql://localhost:3306/petstore_test
-jdbc.username: ${jdbc.username}
-jdbc.password: ${jdbc.password}
-
-hibernate.dialect: org.hibernate.dialect.MySQL5InnoDBDialect
diff --git a/petstore-infrastructure/src/test/resources/database.xml b/petstore-infrastructure/src/test/resources/database.xml
deleted file mode 100644
index 31d375c..0000000
--- a/petstore-infrastructure/src/test/resources/database.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
-           http://www.springframework.org/schema/context
-           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
-
-    <context:property-placeholder location="classpath:database.properties" system-properties-mode="OVERRIDE"/>
-
-    <import resource="classpath:persistence.xml"/>
-
-</beans>
\ No newline at end of file
diff --git a/petstore-system-tests/pom.xml b/petstore-system-tests/pom.xml
index 737283a..e022078 100644
--- a/petstore-system-tests/pom.xml
+++ b/petstore-system-tests/pom.xml
@@ -93,8 +93,9 @@
     </dependencies>
 
     <properties>
-        <webdriver.factory.class>test.support.com.pyxis.petstore.web.SingleInstanceWebDriverFactory
-        </webdriver.factory.class>
+        <webdriver.factory.class>test.support.com.pyxis.petstore.web.SingleInstanceWebDriverFactory</webdriver.factory.class>
+        <timeServer.host>localhost</timeServer.host>
+        <timeServer.port>10013</timeServer.port>
     </properties>
 
     <build>
@@ -137,7 +138,10 @@
                         <include>**/*Feature.java</include>
                     </includes>
                     <systemPropertyVariables>
+                        <jdbc.url>${jdbc.url}</jdbc.url>
                         <webdriver.factory.class>${webdriver.factory.class}</webdriver.factory.class>
+                        <timeServer.host>${timeServer.host}</timeServer.host>
+                        <timeServer.port>${timeServer.port}</timeServer.port>
                         <server.port>${server.port}</server.port>
                         <app.context>${app.context}</app.context>
                     </systemPropertyVariables>
diff --git a/petstore-system-tests/src/test/java/test/support/com/pyxis/petstore/web/ApplicationContext.java b/petstore-system-tests/src/test/java/test/support/com/pyxis/petstore/web/ApplicationContext.java
index ee600ac..9249e14 100644
--- a/petstore-system-tests/src/test/java/test/support/com/pyxis/petstore/web/ApplicationContext.java
+++ b/petstore-system-tests/src/test/java/test/support/com/pyxis/petstore/web/ApplicationContext.java
@@ -4,10 +4,15 @@ import org.springframework.context.support.ClassPathXmlApplicationContext;
 
 public class ApplicationContext {
 
-    private static final String[] CONFIG_LOCATIONS = new String[] { "database.xml" };
+    private static final String[] CONFIG_LOCATIONS = new String[] {
+            "persistence.xml"
+    };
     private static ApplicationContext context;
     private org.springframework.context.ApplicationContext springContext;
 
+    private static final String TIME_SERVER_PORT = "timeServer.port";
+    private static final String NON_PRIVILEDGED_PORT = "10013";
+
     public static <T> T get(Class<T> beanType) {
         return get().getBean(beanType);
     }
@@ -28,4 +33,8 @@ public class ApplicationContext {
     public <T> T getBean(Class<T> type) {
         return springContext.getBean(type);
     }
+
+    public static int timeServerPort() {
+        return Integer.parseInt(System.getProperty(TIME_SERVER_PORT, NON_PRIVILEDGED_PORT));
+    }
 }
diff --git a/petstore-system-tests/src/test/java/test/system/com/pyxis/petstore/PurchaseFeature.java b/petstore-system-tests/src/test/java/test/system/com/pyxis/petstore/PurchaseFeature.java
index 39b172e..d45425d 100644
--- a/petstore-system-tests/src/test/java/test/system/com/pyxis/petstore/PurchaseFeature.java
+++ b/petstore-system-tests/src/test/java/test/system/com/pyxis/petstore/PurchaseFeature.java
@@ -1,21 +1,26 @@
 package test.system.com.pyxis.petstore;
 
 import com.pyxis.petstore.domain.product.Product;
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import test.support.com.pyxis.petstore.nist.FrozenTimeServer;
 import test.support.com.pyxis.petstore.web.DatabaseDriver;
 import test.support.com.pyxis.petstore.web.PetStoreDriver;
 import test.system.com.pyxis.petstore.page.*;
 
 import java.math.BigDecimal;
 
+import static test.support.com.pyxis.petstore.builders.DateBuilder.aDate;
 import static test.support.com.pyxis.petstore.builders.ItemBuilder.anItem;
 import static test.support.com.pyxis.petstore.builders.ProductBuilder.aProduct;
+import static test.support.com.pyxis.petstore.web.ApplicationContext.timeServerPort;
 
 public class PurchaseFeature {
 
     PetStoreDriver petstore = new PetStoreDriver();
     DatabaseDriver database = new DatabaseDriver();
+    FrozenTimeServer timeServer = FrozenTimeServer.atPointInTime(aDate().onCalendar(2010, 10, 23).atTime(9, 45, 0).build());
 
     HomePage homePage;
     BigDecimal total;
@@ -23,10 +28,16 @@ public class PurchaseFeature {
     @Before public void
     startApplication() throws Exception {
         database.start();
+        timeServer.start(timeServerPort());
         homePage = petstore.start();
         setupContext();
     }
 
+    @After public void
+    stopApplication() throws Exception {
+        timeServer.stop();
+    }
+
     private void setupContext() throws Exception {
         Product labrador = aProduct().withName("Labrador Retriever").build();
         database.given(labrador);
@@ -48,7 +59,9 @@ public class PurchaseFeature {
         purchasePage.willPayUsingCreditCard("Visa", "9999 9999 9999 9999", "12/12");
 
         ReceiptPage receiptPage = purchasePage.confirmOrder();
+
         receiptPage.showsTotalPaid(total);
+        receiptPage.showsProcessedAt("2010-10-23");
         receiptPage.showsLineItem("11111111", "Male Adult", "599.00");
         receiptPage.showsLineItem("22222222", "Female Adult", "649.00");
         receiptPage.showsBillingInformation("John", "Leclair", "jleclair@gmail.com");
diff --git a/petstore-system-tests/src/test/java/test/system/com/pyxis/petstore/page/ReceiptPage.java b/petstore-system-tests/src/test/java/test/system/com/pyxis/petstore/page/ReceiptPage.java
index a9e5f45..dcfe0f7 100644
--- a/petstore-system-tests/src/test/java/test/system/com/pyxis/petstore/page/ReceiptPage.java
+++ b/petstore-system-tests/src/test/java/test/system/com/pyxis/petstore/page/ReceiptPage.java
@@ -25,6 +25,10 @@ public class ReceiptPage extends PageObject {
         assertPresenceOf(element("order-total").with(text(being(total))));
     }
 
+    public void showsProcessedAt(String date) {
+        assertPresenceOf(element("order-date").with(text(being(date))));
+    }
+
     public void showsLineItem(String itemNumber, String itemDescription, String totalPrice) {
         assertPresenceOf(cellDisplayingNameOfItem(itemNumber).with(text(containsString(itemDescription))));
         assertPresenceOf(cellDisplayingTotalForItem(itemNumber).with(text(being(totalPrice))));
diff --git a/petstore-system-tests/src/test/resources/database.properties b/petstore-system-tests/src/test/resources/database.properties
deleted file mode 100644
index 094541f..0000000
--- a/petstore-system-tests/src/test/resources/database.properties
+++ /dev/null
@@ -1,6 +0,0 @@
-jdbc.driverClassName: com.mysql.jdbc.Driver
-jdbc.url: ${jdbc.url}
-jdbc.username: ${jdbc.username}
-jdbc.password: ${jdbc.password}
-
-hibernate.dialect: org.hibernate.dialect.MySQL5InnoDBDialect
\ No newline at end of file
diff --git a/petstore-system-tests/src/test/resources/database.xml b/petstore-system-tests/src/test/resources/database.xml
deleted file mode 100644
index 59e26bf..0000000
--- a/petstore-system-tests/src/test/resources/database.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
-           http://www.springframework.org/schema/tx 
-       	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
-           http://www.springframework.org/schema/context
-           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
-
-    <context:property-placeholder location="classpath:database.properties" system-properties-mode="OVERRIDE"/>
-
-    <import resource="classpath:persistence.xml"/>
-
-</beans>
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index 4c25228..9200b46 100644
--- a/pom.xml
+++ b/pom.xml
@@ -308,19 +308,37 @@
                 <server.port>8080</server.port>
                 <log.file>development</log.file>
                 <jdbc.url>jdbc:mysql://localhost:3306/petstore_dev</jdbc.url>
+                <timeServer.host>time.nist.gov</timeServer.host>
+                <timeServer.port>13</timeServer.port>
             </properties>
         </profile>
         <profile>
-            <id>production</id>
+            <id>test</id>
+            <activation>
+                <property>
+                    <name>env.type</name>
+                    <value>test</value>
+                </property>
+            </activation>
+            <properties>
+                <jdbc.url>jdbc:mysql://localhost:3306/petstore_test</jdbc.url>
+                <timeServer.host>localhost</timeServer.host>
+                <timeServer.port>10013</timeServer.port>
+            </properties>
+        </profile>
+        <profile>
+            <id>system</id>
             <properties>
                 <server.port>8280</server.port>
-                <log.file>production</log.file>
+                <log.file>system</log.file>
                 <jdbc.url>jdbc:mysql://localhost:3306/petstore</jdbc.url>
+                <timeServer.host>localhost</timeServer.host>
+                <timeServer.port>10013</timeServer.port>
             </properties>
             <activation>
                 <property>
                     <name>env.type</name>
-                    <value>production</value>
+                    <value>system</value>
                 </property>
             </activation>
         </profile>
